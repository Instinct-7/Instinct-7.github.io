<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2022/06/11/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>onetext</title>
    <url>/2022/06/11/onetext/</url>
    <content><![CDATA[<h1 id="111111111111111111111111111111111111111"><a href="#111111111111111111111111111111111111111" class="headerlink" title="111111111111111111111111111111111111111"></a>111111111111111111111111111111111111111</h1>]]></content>
  </entry>
  <entry>
    <title>创建对象的几种方式</title>
    <url>/2022/05/03/%E5%8E%9F%E5%9E%8B%20%E5%8E%9F%E5%9E%8B%E9%93%BE%20%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h3 id="通过字面量"><a href="#通过字面量" class="headerlink" title="通过字面量"></a>通过字面量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> o1 = &#123;<span class="attr">name</span>:<span class="string">&#x27;o1&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">var</span> o2 = <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;o2&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="通过构造函数"><a href="#通过构造函数" class="headerlink" title="通过构造函数"></a>通过构造函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;name&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;小明&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Object-create"><a href="#Object-create" class="headerlink" title="Object.create()"></a>Object.create()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;<span class="attr">name</span>:<span class="string">&#x27;o3&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> b = <span class="title class_">Object</span>.<span class="title function_">create</span>(a)</span><br><span class="line"><span class="comment">// b.__proto__ === &#123;name:&#x27;o3&#x27;&#125;  // false</span></span><br><span class="line"><span class="comment">// b.__proto__ === a  // true  b的隐式原型指向a对象</span></span><br></pre></td></tr></table></figure>

<p>PS.《高程四》里面新增一些其他方式，如工厂模式，原型模式，可以参考 chapter 8.2</p>
<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><h3 id="5条原型规则"><a href="#5条原型规则" class="headerlink" title="5条原型规则"></a>5条原型规则</h3><blockquote>
<p>题目：如何理解 JavaScript 的原型</p>
</blockquote>
<ol>
<li><strong>所有的引用类型（数组、对象、函数），都具有对象特性，即可自由扩展属性（<code>null</code>除外）</strong></li>
<li><strong>所有的引用类型（数组、对象、函数），都有一个<code>__proto__</code>属性，属性值是一个普通的对象</strong></li>
<li><strong>所有的函数，都有一个<code>prototype</code>属性，属性值也是一个普通的对象</strong></li>
<li><strong>所有的引用类型（数组、对象、函数），<code>__proto__</code>属性值指向它的构造函数的<code>prototype</code>属性值</strong></li>
<li><strong>当试图得到一个对象的某个属性时,如果这个对象本身没有这个属性, 那么会去它的<code>__proto__</code>中寻找</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 要点一：自由扩展属性</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; obj.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> arr = []; arr.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span> () &#123;&#125;</span><br><span class="line">fn.<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要点二：__proto__</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">__proto__</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property">__proto__</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要点三：函数有 prototype</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fn.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 要点四：引用类型的 __proto__ 属性值指向它的构造函数的 prototype 属性值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure>

<h4 id="函数的prototype原型"><a href="#函数的prototype原型" class="headerlink" title="函数的prototype原型"></a>函数的prototype原型</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name</span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&#x27;小明&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><p>所有的函数，都有一个<code>prototype</code>属性，这个属性是一个指针，指向原型对象</p>
</li>
<li><p>Foo.prototype的<strong>属性值</strong>是一个对象（属性的集合），默认只有一个叫做constructor的属性,  指向这个函数本身</p>
<img src="https://zxd-blog-imgs.oss-cn-beijing.aliyuncs.com/imgs/20211205212519.png" alt="image-20211205212513672" style="zoom:67%;" />

<ol>
<li>参考<a href="https://www.cnblogs.com/wangfupeng1988/p/3978131.html">深入理解JS原型</a></li>
<li>JavaScript高级程序设计 第四版 P225</li>
</ol>
</li>
</ul>
<h4 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h4><p>在 JavaScript 中，每个实例对象都有一个私有属性 [[Prototype]]，该属性指向了这个实例对象的原型对象，可以通过 ES6 的 <code>Object.getPrototypeOf()</code> 来访问该属性，许多浏览器也对 [[Prototype]] 进行了实现，也就是我们经常见到的<code> __proto__</code>，没错，<code>__proto__ </code>指向了实例对象的原型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Animal</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = <span class="string">&#x27;orange&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> <span class="title class_">Animal</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span>)  <span class="comment">// &#123;constructor: f Animal()&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>)  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(cat) === cat.<span class="property">__proto__</span>)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter&#x2F;setter，当使用 obj.<strong>proto</strong> 时，可以理解成返回了 Object.getPrototypeOf(obj)</p>
<h4 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h4><p>每个原型对象都有一个constructor属性，指向相关联的构造函数。同时，每个构造函数声明之后，都有与之关联的原型对象。</p>
<p>所以，构造函数和构造函数的prototype原型对象时相互指向的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125; </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 声明之后，构造函数就有了一个 </span></span><br><span class="line"><span class="comment"> * 与之关联的原型对象：</span></span><br><span class="line"><span class="comment"> */</span>                                                                                    <span class="number">13</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// Object</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<p><img src="https://zxd-blog-imgs.oss-cn-beijing.aliyuncs.com/imgs/20211205225318.png" alt="原型链示意图"></p>
<p><strong>图中由相互关联的原型组成的链状结构就是原型链，也就是蓝色的这条线</strong></p>
<blockquote>
<p>constructor属性只存在于原型对象，通过实例对象也是可以访问到的。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>当获取 person.constructor 时，其实 person 中并没有 constructor 属性,当不能读取到constructor 属性时，会从 person 的原型也就是 Person.prototype 中读取，正好原型中有该属性, 所以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">person.<span class="property">constructor</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>



<h4 id="理解原型"><a href="#理解原型" class="headerlink" title="理解原型"></a>理解原型</h4><p>无论何时，只要创建一个函数，就会按照特定的规则为这个函数创建一个 prototype 属性（指向原型对象）。默认情况下，所有原型对象自动获得一个名为 constructor 的属性，指回与之关联的构造函数。对前面的例子而言，Person.prototype.constructor指向 Person。然后，因构造函数而异，可能会给原型对象添加其他属性和方法</p>
<p>在自定义构造函数时，原型对象默认只会获得 constructor 属性，其他的所有方法都继承自 Object。每次调用构造函数创建一个新实例，这个实例的内部[[Prototype]]指针就会被赋值为构造函数的原型对象。脚本中没有访问这个[[Prototype]]特性的标准方式，但 Firefox、Safari 和 Chrome会在每个对象上暴露<code>__proto__</code>属性，通过这个属性可以访问对象的原型。在其他实现中，这个特性完全被隐藏了。关键在于理解这一点：<strong>实例与构造函数原型之间有直接的联系，但实例与构造函数之间没有</strong>。</p>
<h5 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 构造函数可以是函数表达式</span></span><br><span class="line"><span class="comment"> * 也可以是函数声明，因此以下两种形式都可以： </span></span><br><span class="line"><span class="comment"> *   function Person() &#123;&#125; </span></span><br><span class="line"><span class="comment"> *   let Person = function() &#123;&#125; </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125; </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 声明之后，构造函数就有了一个 </span></span><br><span class="line"><span class="comment"> * 与之关联的原型对象：</span></span><br><span class="line"><span class="comment"> */</span>                                                                                    <span class="number">13</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// Object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);  <span class="comment">// &#123; constructor: f Person()&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 如前所述，构造函数有一个prototype 属性 </span></span><br><span class="line"><span class="comment"> * 引用其原型对象，而这个原型对象也有一个 </span></span><br><span class="line"><span class="comment"> * constructor 属性，引用这个构造函数 </span></span><br><span class="line"><span class="comment"> * 换句话说，两者循环引用：</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 正常的原型链都会终止于Object 的原型对象 </span></span><br><span class="line"><span class="comment"> * Object 原型的原型是null </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>);   <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Object</span>); <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="literal">null</span>);     <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>); </span><br><span class="line"><span class="comment">// &#123; </span></span><br><span class="line"><span class="comment">//   constructor: f Object(), </span></span><br><span class="line"><span class="comment">//   toString: ... </span></span><br><span class="line"><span class="comment">//   hasOwnProperty: ... </span></span><br><span class="line"><span class="comment">//   isPrototypeOf: ... </span></span><br><span class="line"><span class="comment">//   ... </span></span><br><span class="line"><span class="comment">// &#125; </span></span><br></pre></td></tr></table></figure>

<h5 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(), </span><br><span class="line">    person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(); </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 构造函数、原型对象和实例 </span></span><br><span class="line"><span class="comment"> * 是3 个完全不同的对象： </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 !== <span class="title class_">Person</span>);           <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 !== <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> !== <span class="title class_">Person</span>);  <span class="comment">// true </span></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment">  * 实例通过__proto__链接到原型对象， </span></span><br><span class="line"><span class="comment">  * 它实际上指向隐藏特性[[Prototype]] </span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * 构造函数通过prototype 属性链接到原型对象 </span></span><br><span class="line"><span class="comment">  * </span></span><br><span class="line"><span class="comment">  * 实例与构造函数没有直接联系，与原型对象有直接联系 </span></span><br><span class="line"><span class="comment">  */</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);   <span class="comment">// true </span></span><br><span class="line">conosle.<span class="title function_">log</span>(person1.<span class="property">__proto__</span>.<span class="property">constructor</span> === <span class="title class_">Person</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 同一个构造函数创建的两个实例 </span></span><br><span class="line"><span class="comment"> * 共享同一个原型对象：</span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">__proto__</span> === person2.<span class="property">__proto__</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * instanceof 检查实例的原型链中</span></span><br><span class="line"><span class="comment">  * 是否包含指定构造函数的原型： </span></span><br><span class="line"><span class="comment"> */</span> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>);           <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>);           <span class="comment">// true </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>);  <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<img src="https://zxd-blog-imgs.oss-cn-beijing.aliyuncs.com/imgs/20211205220302.png" alt="image-20211205220302541" style="zoom: 67%;" />

<p>图 8-1 展示了 Person 构造函数、Person的原型对象和 Person 现有两个实例之间的关系。注意， Person.prototype 指向原型对象，而 Person.prototype.contructor指回 Person构造函数。原型对象包含 constructor 属性和其他后来添加的属性。Person 的两个实例 person1 和 person2 都只有一个内部属性指回 Person.prototype，而且两者都与构造函数没有直接联系。另外要注意，虽然这两个实例都没有属性和方法，但 person1.sayName()可以正常调用。这是由于对象属性查找机制的原因</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;&#125;  </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&quot;Nicholas&quot;</span>; </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">29</span>; </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&quot;Software Engineer&quot;</span>; </span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;                                                <span class="number">2</span> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">let</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();                                                            <span class="number">3</span> </span><br><span class="line"><span class="keyword">let</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(); </span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>; </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>);  <span class="comment">// &quot;Greg&quot;，来自实例 </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>);  <span class="comment">// &quot;Nicholas&quot;，来自原型</span></span><br></pre></td></tr></table></figure>



<h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h3><p>先写一个简单的代码示例</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">alertName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建实例</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Foo</span>(<span class="string">&#x27;zhangsan&#x27;</span>)</span><br><span class="line">f.<span class="property">printName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line">f.<span class="title function_">printName</span>()</span><br><span class="line">f.<span class="title function_">alertName</span>()</span><br><span class="line"></span><br><span class="line">f.<span class="title function_">toString</span>() <span class="comment">// 要去f.__proto__.__proto__中去查找</span></span><br></pre></td></tr></table></figure>

<p>执行<code>printName</code>时很好理解，但是执行<code>alertName</code>时发生了什么？这里再记住一个重点 <strong>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<code>__proto__</code>（即它的构造函数的<code>prototype</code>）中寻找</strong>，因此<code>f.alertName</code>就会找到<code>Foo.prototype.alertName</code>。</p>
<p>那么如何判断这个属性是不是对象本身的属性呢？使用<code>hasOwnProperty</code>，常用的地方是遍历一个对象的时候。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> item</span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> f) &#123;</span><br><span class="line">    <span class="comment">// 高级浏览器已经在 for in 中屏蔽了来自原型的属性</span></span><br><span class="line">  	<span class="comment">// 当前浏览器已经不需要这样的判断了  for in 不能遍历原型的属性了</span></span><br><span class="line">    <span class="keyword">if</span> (f.<span class="title function_">hasOwnProperty</span>(item)) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 刚才的例子</span></span><br><span class="line">f.<span class="title function_">toString</span>() <span class="comment">// 要去f.__proto__.__proto__中去查找</span></span><br></pre></td></tr></table></figure>

<p>因为<code>f</code>本身没有<code>toString()</code>，并且<code>f.__proto__</code>（即<code>Foo.prototype</code>）中也没有<code>toString</code>。这个问题还是得拿出刚才那句话——<strong>当试图得到一个对象的某个属性时，如果这个对象本身没有这个属性，那么会去它的<code>__proto__</code>（即它的构造函数的<code>prototype</code>）中寻找</strong>。</p>
<p>如果在<code>f.__proto__</code>中没有找到<code>toString</code>，那么就继续去<code>f.__proto__.__proto__</code>中寻找，因为<code>f.__proto__</code>就是一个普通的对象而已嘛！</p>
<ul>
<li><code>f.__proto__</code>即<code>Foo.prototype</code>，没有找到<code>toString</code>，继续往上找</li>
<li><code>f.__proto__.__proto__</code>即<code>Foo.prototype.__proto__</code>。<code>Foo.prototype</code>就是一个普通的对象，因此<code>Foo.prototype.__proto__</code>就是<code>Object.prototype</code>，在这里可以找到<code>toString</code></li>
<li>因此<code>f.toString</code>最终对应到了<code>Object.prototype.toString</code></li>
</ul>
<p>这样一直往上找，你会发现是一个链式的结构，所以叫做“原型链”。如果一直找到最上层都没有找到，那么就宣告失败，返回<code>undefined</code>。最上层是什么 —— <code>Object.prototype.__proto__ === null</code></p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="真的是继承吗"><a href="#真的是继承吗" class="headerlink" title="真的是继承吗"></a>真的是继承吗</h3><p>我们常常提到“每一个对象都会从原型‘继承’属性”，实际上，继承是一个十分具有迷惑性的说法，引用《你不知道的JavaScript》中的话，就是：</p>
<p><strong>继承意味着复制操作，然而 JavaScript 默认并不会复制对象的属性</strong>，相反，<strong>JavaScript 只是在两个对象之间创建一个关联，这样，一个对象就可以通过委托访问另一个对象的属性和函数，所以与其叫继承，委托的说法反而更准确些</strong>。</p>
<h3 id="JS实现继承的几种方式"><a href="#JS实现继承的几种方式" class="headerlink" title="JS实现继承的几种方式"></a>JS实现继承的几种方式</h3><p>继承可以使得子类具有父类的各种方法和属性</p>
<h4 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1. 原型链继承"></a>1. 原型链继承</h4><p>构造函数、原型和实例的关系：每个构造函数都有一个原型对象，原型对象都包含一个属性指回构造函数，而实例都包含一个原型对象的指针。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;kevin&#x27;</span>;</span><br><span class="line">  	<span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span> () &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Child通过创建Parent的实例，并将其复制给自己的原型Child.prototype 实现了对Parent的继承</span></span><br><span class="line"><span class="comment">// child.prototype现在是Parent的一个实例</span></span><br><span class="line"><span class="comment">// Child.prototype.__proto__ === Parent.prototype  : true</span></span><br><span class="line"><span class="comment">// 继承Parent</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="title function_">getName</span>()) <span class="comment">// kevin</span></span><br><span class="line"><span class="comment">// 注意，Child.prototype.constructor === Child    : false </span></span><br><span class="line"><span class="comment">// Child.prototype.constructor === Parent   : true</span></span><br><span class="line"><span class="comment">// Child.prototype的constructor属性被重写为指向Parent, 所以instance.constructor也指向 Parent</span></span><br></pre></td></tr></table></figure>

<p><img src="https://zxd-blog-imgs.oss-cn-beijing.aliyuncs.com/imgs/20211206135705.png" alt="image-20211206135705724"></p>
<p><img src="https://zxd-blog-imgs.oss-cn-beijing.aliyuncs.com/imgs/20211206163918.png" alt="image-20211206163918381"></p>
<ul>
<li><code>SubType.prototype.constructor === SuperType</code>    &#x2F;&#x2F; true</li>
<li><code>SubType.prototype.constructor === SubType</code>   &#x2F;&#x2F; false</li>
<li><code>SubType.prototype.__proto__ === SuperType.prototype</code>   &#x2F;&#x2F; true</li>
</ul>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li><strong>原型中包含的引用值会在所有实例间共享</strong></li>
<li>子类型在实例化的时候，不能给父类型的构造函数传参</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;kevin&#x27;</span>;</span><br><span class="line">  	<span class="variable language_">this</span>.<span class="property">lists</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span> () &#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;child&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承Parent</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ch1 = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"><span class="keyword">let</span> ch2 = <span class="keyword">new</span> <span class="title class_">Child</span>()</span><br><span class="line"></span><br><span class="line">ch1.<span class="property">lists</span>.<span class="title function_">push</span>(<span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ch1.<span class="property">lists</span>)  <span class="comment">// ch1改变的lists,</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ch2.<span class="property">lists</span>)   <span class="comment">// ch2也改变了</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ch1.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ch2.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-构造函数继承-经典继承"><a href="#2-构造函数继承-经典继承" class="headerlink" title="2. 构造函数继承(经典继承)"></a>2. 构造函数继承(经典继承)</h4><p><strong>使用父类的构造函数来增强子类实例，等同于复制父类的实例给子类（不使用原型）</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>) &#123; </span><br><span class="line"><span class="comment">// 继承SuperType                                                                     4</span></span><br><span class="line"><span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">let</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubType</span>();                                                         <span class="number">5</span> </span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&quot;black&quot;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">colors</span>); <span class="comment">// &quot;red,blue,green,black&quot; </span></span><br><span class="line"><span class="keyword">let</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">colors</span>); <span class="comment">// &quot;red,blue,green&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>核心代码是<code>SuperType.call(this)</code>, 创建子类实例时调用<code>SuperType</code>构造函数，于是<code>SubType</code>的每个实例都会将SuperType中的属性复制一份.</p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ol>
<li>避免了引用类型的属性被所有实例共享 (避免了父类的引用属性被共享)</li>
<li>可以在子类构造函数中向父类构造函数传参</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Parent</span> (name) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Hello World&#x27;</span>)&#125; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span> (name) &#123;</span><br><span class="line">    <span class="title class_">Parent</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name) 	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Child.prototype.getName = function()&#123;console.log(123123)&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child1 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;kevin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child1.<span class="property">name</span>); <span class="comment">// kevin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child2 = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;daisy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2.<span class="property">name</span>); <span class="comment">// daisy</span></span><br><span class="line"><span class="comment">// console.log(child2.getName()) </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child2.<span class="title function_">sayHi</span>()) <span class="comment">// 1. TypeError: child2.sayHi is not a function</span></span><br></pre></td></tr></table></figure>

<h5 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>父类原型对象(parent)中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法。即：<strong>只能继承父类的实例属性和方法，不能继承原型属性和方法</strong>。</li>
</ol>
<h4 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3. 组合继承"></a>3. 组合继承</h4><p>组合继承（有时候也叫伪经典继承）综合了原型链和盗用构造函数两种方式的继承。</p>
<p>用<strong>原型链</strong>实现对<strong>原型</strong>属性和方法的继承，通过借用<strong>构造函数</strong>实现<strong>实例</strong>属性的继承</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>)&#123;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>)&#123; </span><br><span class="line">  <span class="comment">// 继承属性  // 第二次调用SuperType, </span></span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">age</span> = age; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 继承方法  第一次调用SuperType， </span></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>(); </span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>); </span><br><span class="line">&#125;; </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ch1 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;Nicholas&quot;</span>, <span class="number">29</span>); </span><br><span class="line">ch1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&quot;black&quot;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ch1.<span class="property">colors</span>);  <span class="comment">// &quot;red,blue,green,black&quot; </span></span><br><span class="line">ch1.<span class="title function_">sayName</span>();            <span class="comment">// &quot;Nicholas&quot;; </span></span><br><span class="line">ch1.<span class="title function_">sayAge</span>();             <span class="comment">// 29 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ch2 = <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&quot;Greg&quot;</span>, <span class="number">27</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ch2.<span class="property">colors</span>);  <span class="comment">// &quot;red,blue,green&quot; </span></span><br><span class="line">ch2.<span class="title function_">sayName</span>();            <span class="comment">// &quot;Greg&quot;; </span></span><br><span class="line">ch2.<span class="title function_">sayAge</span>();             <span class="comment">// 27 </span></span><br></pre></td></tr></table></figure>

<h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><ol>
<li><strong>组合继承最大的缺点是会调用两次父构造函数</strong>, SuperType被调用执行了两次，多了一次性能开销</li>
</ol>
<h4 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4. 原型式继承"></a>4. 原型式继承</h4><p>上面的都是围绕着构造函数的继承方式(new) , 对于JS普通对象，怎么实现继承呢</p>
<h5 id="Object-create-模拟"><a href="#Object-create-模拟" class="headerlink" title="Object.create()模拟"></a>Object.create()模拟</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES5 Object.create的模拟实现，将传入的对象作为创建对象的原型</span></span><br><span class="line"><span class="comment">// 这个 object()函数会创建一个临时构造函数，将传入的对象赋值给这个构造函数的原型，然后返 </span></span><br><span class="line"><span class="comment">// 回这个临时类型的一个实例。本质上，object()是对传入的对象执行了一次浅复制。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create()这个方法接收两个参数：</span></span><br><span class="line"><span class="comment">// 1. 作为新对象原型的对象，</span></span><br><span class="line"><span class="comment">// 2. 以及给新对象定义额外属性的对象（第二个可选）</span></span><br><span class="line"><span class="keyword">let</span> b = &#123;<span class="attr">name</span>:<span class="string">&#x27;b&#x27;</span>, <span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Object</span>.<span class="title function_">create</span>(b) <span class="comment">// a &#123;&#125;    a.__proto__  --&gt;指向：  &#123;name:&#x27;b&#x27;, age:18&#125;</span></span><br><span class="line">a.<span class="property">__proto__</span> === b.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">// false</span></span><br><span class="line">a.<span class="property">__proto__</span> === b   <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;  </span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>, </span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&quot;Shelby&quot;</span>, <span class="string">&quot;Court&quot;</span>, <span class="string">&quot;Van&quot;</span>],</span><br><span class="line">  <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title function_">create</span>(person); </span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&quot;Greg&quot;</span>;                                                           <span class="number">6</span> </span><br><span class="line">p1.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;Rob&quot;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">create</span>(person); </span><br><span class="line">p2.<span class="property">name</span> = <span class="string">&quot;Linda&quot;</span>;                                                       <span class="number">7</span> </span><br><span class="line">p2.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&quot;Barbie&quot;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">friends</span>);  <span class="comment">// &quot;Shelby,Court,Van,Rob,Barbie&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1)   <span class="comment">// F &#123;name: &#x27;Greg&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="title function_">getName</span>())  <span class="comment">// Linda</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">friends</span>)  <span class="comment">//  [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">friends</span>) <span class="comment">//  [&#x27;Shelby&#x27;, &#x27;Court&#x27;, &#x27;Van&#x27;, &#x27;Rob&#x27;, &#x27;Barbie&#x27;]</span></span><br></pre></td></tr></table></figure>

<h5 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h5><ol>
<li>包含引用类型的属性被多个实例所共享，跟原型链继承一样</li>
<li>无法传递参数</li>
</ol>
<h4 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5. 寄生式继承"></a>5. 寄生式继承</h4><p>寄生式继承背后的思路类似于寄生构造函数和工厂模式：创建一个实现继承的函数，以某种方式增强对象，然后返回这个对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">original</span>)&#123;  </span><br><span class="line">  <span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(original);  <span class="comment">// 通过调用函数创建一个新对象 </span></span><br><span class="line">  clone.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;     <span class="comment">// 以某种方式增强这个对象 </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>); </span><br><span class="line">  &#125;; </span><br><span class="line">  <span class="keyword">return</span> clone;           <span class="comment">// 返回这个对象 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>,</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&quot;p1&quot;</span>, <span class="string">&quot;p2&quot;</span>, <span class="string">&quot;p3&quot;</span>],</span><br><span class="line">  <span class="attr">getName</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnother</span>(<span class="params">original</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> clone = <span class="title class_">Object</span>.<span class="title function_">create</span>(original);</span><br><span class="line">  clone.<span class="property">getFriends</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">friends</span>;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> clone;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="title function_">createAnother</span>(person);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="title function_">getFriends</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><ul>
<li>跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</li>
</ul>
<h4 id="6-寄生组合式继承-完美"><a href="#6-寄生组合式继承-完美" class="headerlink" title="6. 寄生组合式继承 完美"></a>6. 寄生组合式继承 完美</h4><p>基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父<br>类原型，然后将返回的新对象赋值给子类原型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subType, superType</span>) &#123; </span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="title class_">Object</span>.<span class="title function_">create</span>(superType.<span class="property"><span class="keyword">prototype</span></span>);  <span class="comment">// 创建对象 </span></span><br><span class="line">  prototype.<span class="property">constructor</span> = subType;              <span class="comment">// 增强对象 </span></span><br><span class="line">  subType.<span class="property"><span class="keyword">prototype</span></span> = prototype;                <span class="comment">// 赋值对象 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">// 简单写法 </span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inherit</span>(<span class="params">Child, Parent</span>) &#123;</span><br><span class="line">  <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个 inheritPrototype()函数实现了寄生式组合继承的核心逻辑。这个函数接收两个参数：子类构造函数和父类构造函数。在这个函数内部，第一步是创建父类原型的一个副本。然后，给返回的prototype 对象设置 constructor属性，解决由于重写原型导致默认 constructor丢失的问题。最后将新创建的对象赋值给子类型的原型</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>) &#123; </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;  </span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;green&quot;</span>]; </span><br><span class="line">&#125; </span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123; </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>); </span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>) &#123; </span><br><span class="line">  <span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name); </span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age; </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 调用  Child / Parent</span></span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">SubType</span>, <span class="title class_">SuperType</span>); </span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;                                                <span class="number">2</span> </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span> (parent, child) &#123;</span><br><span class="line">  <span class="comment">// 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程</span></span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(parent.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  child.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = child;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Parent6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;parent6&#x27;</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">play</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"> <span class="title class_">Parent6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child6</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title class_">Parent6</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">friends</span> = <span class="string">&#x27;child5&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clone</span>(<span class="title class_">Parent6</span>, <span class="title class_">Child6</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child6</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getFriends</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">friends</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person6 = <span class="keyword">new</span> <span class="title class_">Child6</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6.<span class="title function_">getName</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person6.<span class="title function_">getFriends</span>());</span><br></pre></td></tr></table></figure>

<ul>
<li><code>Child.prototype = Object.create(Parent.prototype);</code>和 <code>Child.prototype = new Parent()</code>;</li>
<li>new Parent()会带来副作用，原型包含的属性值会在所有实例中共享</li>
</ul>
<h4 id="7-ES6-extends"><a href="#7-ES6-extends" class="headerlink" title="7. ES6 extends"></a>7. ES6 extends</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 原型方法</span></span><br><span class="line">  <span class="comment">// 即 Person.prototype.getName = function() &#123; &#125;</span></span><br><span class="line">  <span class="comment">// 下面可以简写为 getName() &#123;...&#125;</span></span><br><span class="line">  getName = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Person:&#x27;</span>, <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Gamer</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="comment">// 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。</span></span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> asuna = <span class="keyword">new</span> <span class="title class_">Gamer</span>(<span class="string">&#x27;Asuna&#x27;</span>, <span class="number">20</span>)</span><br><span class="line">asuna.<span class="title function_">getName</span>() <span class="comment">// 成功访问到父类的方法</span></span><br></pre></td></tr></table></figure>

<h5 id="Babel编译extends"><a href="#Babel编译extends" class="headerlink" title="Babel编译extends"></a>Babel编译extends</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_possibleConstructorReturn</span> (self, call) &#123; </span><br><span class="line">		<span class="comment">// ...</span></span><br><span class="line">		<span class="keyword">return</span> call &amp;&amp; (<span class="keyword">typeof</span> call === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> call === <span class="string">&#x27;function&#x27;</span>) ? call : self; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_inherits</span> (subClass, superClass) &#123; </span><br><span class="line">    <span class="comment">// 这里可以看到</span></span><br><span class="line">	subClass.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(superClass &amp;&amp; superClass.<span class="property"><span class="keyword">prototype</span></span>, &#123; </span><br><span class="line">		<span class="attr">constructor</span>: &#123; </span><br><span class="line">			<span class="attr">value</span>: subClass, </span><br><span class="line">			<span class="attr">enumerable</span>: <span class="literal">false</span>, </span><br><span class="line">			<span class="attr">writable</span>: <span class="literal">true</span>, </span><br><span class="line">			<span class="attr">configurable</span>: <span class="literal">true</span> </span><br><span class="line">		&#125; </span><br><span class="line">	&#125;); </span><br><span class="line">	<span class="keyword">if</span> (superClass) <span class="title class_">Object</span>.<span class="property">setPrototypeOf</span> ? <span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(subClass, superClass) : subClass.<span class="property">__proto__</span> = superClass; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Parent</span> = <span class="keyword">function</span> <span class="title function_">Parent</span> () &#123;</span><br><span class="line">	<span class="comment">// 验证是否是 Parent 构造出来的 this</span></span><br><span class="line">	<span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">Parent</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Child</span> = (<span class="keyword">function</span> (<span class="params">_Parent</span>) &#123;</span><br><span class="line">	<span class="title function_">_inherits</span>(<span class="title class_">Child</span>, _Parent);</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">Child</span> () &#123;</span><br><span class="line">		<span class="title function_">_classCallCheck</span>(<span class="variable language_">this</span>, <span class="title class_">Child</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_">_possibleConstructorReturn</span>(<span class="variable language_">this</span>, (<span class="title class_">Child</span>.<span class="property">__proto__</span> || <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">Child</span>)).<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>));</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="title class_">Child</span>;</span><br><span class="line">&#125;(<span class="title class_">Parent</span>));</span><br></pre></td></tr></table></figure>

<p><img src="https://zxd-blog-imgs.oss-cn-beijing.aliyuncs.com/imgs/20211206161911.png" alt="image-20211206161911149"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol>
<li><a href="https://github.com/mqyqingfeng/Blog/issues/2#">JavaScript深入之从原型到原型链</a></li>
<li>JavaScript高级程序设计 第四版 chapter 8.3 继承</li>
<li><a href="https://juejin.cn/post/6844903477819211784">JavaScript深入之继承的多种方式和优缺点</a></li>
<li>拉勾教育 JS核心原理精讲</li>
<li><a href="https://juejin.cn/post/6844903696111763470">JavaScript常用八种继承方案</a></li>
</ol>
]]></content>
  </entry>
</search>
